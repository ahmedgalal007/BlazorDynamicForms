@using Components.Grid

@for (int i = 0; i < row.RowCells.Count; i++)
{
    int localindex = i;

    <MudItem xs="@row.RowCells[localindex].Cols">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-0 px-2" Style="display: flex; flex-direction: column; height: 100%;">
            <MudStack Spacing="0" Row="true" Class="object-center align-center justify-self-center mud-width-full">
                <MudIconButton Variant="@Variant.Text" Icon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="(()=>UpdateBreaks(localindex,-1))" Size="Size.Small" />
                <MudText Typo="Typo.body1" Align="Align.Center" Class="justify-center">@row.RowCells[localindex].Cols</MudText>
                <MudIconButton Variant="@Variant.Text" Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="(()=>UpdateBreaks(localindex,1))" Size="Size.Small" />
                <MudSpacer />
                <MudMenu Dense="true" ActivationEvent="@MouseEvent.LeftClick" Class="align-self-end ma-0 pa-0" Icon="@Icons.Material.Filled.MoreVert" Variant="Variant.Text" Color="Color.Primary">
                    <MudMenuItem Class="ma-0 pa-0">
                        <MudToolBar WrapContent="false" Class="ma-0 pa-0">
                            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Add" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Remove" OnClick="(()=>RemoveBreaks(localindex))" Color="Color.Inherit" />
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" />
                        </MudToolBar>
                    </MudMenuItem>
                </MudMenu>
            </MudStack>
            <MudStack Spacing="0" Row="true" Class="d-flex flex-grow-1 mud-width-full object-cover ">
                <MudIconButton OnClick="(()=>AddCell(localindex, 0))" Variant="@Variant.Outlined" Class="flex-grow-0 object-left ma-0 pa-0" Icon="@Icons.Material.Outlined.ArrowLeft" Size="Size.Small"></MudIconButton>
                <MudDropZone T="DropItem" AllowReorder="true" Identifier="@(row.GetIdentifier(localindex))" Class="rounded-lg border-2 border-dashed mud-border-lines-default pa-1 ma-1 flex-grow-1 overflow-hidden mud-width-full" Style="min-height:60px;"></MudDropZone>
                <MudIconButton OnClick="(()=>AddCell(localindex,1))" Variant="@Variant.Outlined" Class="flex-grow-0 object-right ma-0 pa-0" Icon="@Icons.Material.Outlined.ArrowRight" Size="Size.Small"></MudIconButton>
            </MudStack>
        </MudPaper>
    </MudItem>
}


@code {
    [Parameter] public RowContainer row { get; set; }

    void UpdateBreaks(int index, int changeamount)
    {
        row.UpdateCellCols(index, changeamount);
        StateHasChanged();
    }

    void AddCell(int index, int changeamount)
    {
        row.AddCell(index + changeamount);
        StateHasChanged();
    }

    void RemoveBreaks(int index)
    {
        row.RowCells.RemoveAt(index);
        StateHasChanged();
    }
}


