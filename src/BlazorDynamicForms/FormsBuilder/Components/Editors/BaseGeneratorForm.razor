@using FluentValidation
<MudPaper Elevation="6" Class="pa-4">
    <MudCard Class="pa-8">
        <MudForm Model="@model" @ref="@form">

            <MudCardHeader>
                <MudText Typo="Typo.h6">Add Attribute</MudText>
            </MudCardHeader>
            <MudCardContent Class="pa-0">
                <MudGrid>
                    <MudItem xs="12" md="12">
                        <MudCheckBox T="Boolean" @bind-Value="@model.Required" Label="Required"/>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField T="string" @bind-Value="@model.Name" Label="Name" Variant="@Variant.Outlined"  />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField T="string" @bind-Value="@model.Value" Label="Value" Variant="@Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="6">
                        <DataTypeSelect Model="@model"></DataTypeSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <LookUp OptionType="InputType" Model="@model.InputType"
                                Options="Enum.GetValues<InputType>().ToDictionary(e => Enum.GetName<InputType>(e))"
                                Lable="Select Input Type"></LookUp>
                    </MudItem>
                    @* <MudItem xs="6">
                        <InputTypeSelect Model="@model"></InputTypeSelect>
                    </MudItem> *@
                    <MudItem xs="12" md="6">
                        <MudNumericField T="int" @bind-Value="@model.Cols" Label="Cols" Variant="@Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField T="string" @bind-Value="@model.Format" Label="Format" Variant="@Variant.Outlined" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudText>@print() </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Add</MudButton>
        </MudCardActions>
    </MudCard>
</MudPaper>
@code {
    [Inject] ISnackbar Snackbar {   get; set; }

    [Parameter]
    public List<MetaDataItem> MetaDatas { get; set; } = new();
    [Parameter]
    public EventCallback OnAttributeCreated { get; set; }

    public string Logger { get; set; }
    string print() { return Logger; }

    MudForm form { get; set; } = new();

    MetaDataItem model { get; set; } = new("",EnumValueTypes.Text, InputType.Text);

    public async Task Submit()
    {
        MetaDatas.Add(new MetaDataItem(model.Name, model.DataType, model.InputType, model.Cols, model.Required, model.Format, model.Value));
        Logger = model.DataType.ToString() +  " : " + model.InputType.ToString();
        // await OnAttributeCreated.InvokeAsync();
        await Task.CompletedTask;
    }
}